// SPDX-License-Identifier: MIT
pragma solidity ^0.8.0;

import "@openzeppelin/contracts/token/ERC20/ERC20.sol";
import "@openzeppelin/contracts/access/Ownable.sol";

contract Token is ERC20, Ownable {
    event LogMessage(string message);
    event GadgetsConverted(address indexed account, string deviceName, uint256 quantity);

    mapping(string => uint256) public deviceFares;
    mapping(string => uint256) public deviceWeights;

    constructor() ERC20("degen", "dgn") Ownable(msg.sender) {
        // Initialize token with a total supply of 100 tokens
        _mint(msg.sender, 100);

        // Initialize device fares and weights
        deviceFares["Television"] = 50;
        deviceWeights["Television"] = 50;

        deviceFares["Speaker"] = 5;
        deviceWeights["Speaker"] = 15;

        deviceFares["GamingConsole"] = 3;
        deviceWeights["GamingConsole"] = 20;

        deviceFares["Refrigerator"] = 25;
        deviceWeights["Refrigerator"] = 25;
    }

    function mintTokens(address account, uint256 tokens) public onlyOwner {
        _mint(account, tokens);
    }

    function burnTokens(uint256 tokens) public {
        require(balanceOf(msg.sender) >= tokens, "Insufficient funds for burning tokens");
        _burn(msg.sender, tokens);
        emit LogMessage("Tokens burned successfully");
    }

    function transferTokens(address recipient, uint256 tokens) external {
        require(balanceOf(msg.sender) >= tokens, "Insufficient funds for transferring tokens");
        _transfer(msg.sender, recipient, tokens);
    }

    function redeemDevice(string memory deviceName, uint256 quantity) external {
        require(bytes(deviceName).length > 0, "Device name cannot be empty");
        require(quantity > 0, "Quantity must be greater than zero");

        uint256 totalTokens = deviceFares[deviceName] * quantity;
        require(balanceOf(msg.sender) >= totalTokens, "Not enough funds to redeem device");
        require(deviceWeights[deviceName] >= quantity, "Not enough device weight for redemption");

        address user = msg.sender;

        _burn(user, totalTokens);
        deviceWeights[deviceName] -= quantity;

        emit LogMessage("Device redeemed successfully");
    }

    function convertToDevices(string memory deviceName, uint256 quantity) external {
        require(bytes(deviceName).length > 0, "Device name cannot be empty");
        require(quantity > 0, "Quantity must be greater than zero");

        uint256 totalTokens = deviceFares[deviceName] * quantity;
        require(balanceOf(msg.sender) >= totalTokens, "Not enough funds to convert to devices");

        _burn(msg.sender, totalTokens);
        deviceWeights[deviceName] += quantity;

        emit GadgetsConverted(msg.sender, deviceName, quantity);
    }
}
